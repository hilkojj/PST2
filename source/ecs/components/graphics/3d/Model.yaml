config:
  hpp_incl:
    - graphics/3d/armature.h
    - ../level/room3d/Room3D.h
    - graphics/shader_asset.h
    - set


RenderModel:
  modelName: std::string
  visibilityMask: [uint, 1u]

RenderModelToSpriteSheet:
  yawSteps: [uint, 8u]
  baseYaw: [float, 45.0f]
  pitchSteps: [uint, 0u]
  pitchMin: [float, -45.0f]
  pitchMax: [float, 45.0f]
  spriteSize: [vec2, vec2(2.0f)]

  animationNames: [std::vector<std::string>, '{"Default"}']
  fps: [uint, 16]

  showGrid: [bool, false]
  gridSize: [uint, 10u]
  gridOffset: [vec3, vec3(0.0f)]
  gridColor: [vec3, vec3(1.0f)]

CustomShader @dirtyable:
  vertexShaderPath: std::string
  fragmentShaderPath: std::string
  defines: std::map<std::string, std::string>

  uniformsVec4: std::map<std::string, vec4>
  uniformsVec3: std::map<std::string, vec3>
  uniformsVec2: std::map<std::string, vec2>
  uniformsFloat: std::map<std::string, float>
  uniformsInt: std::map<std::string, int>

  _cpp_only:
    shader: std::shared_ptr<ShaderAsset>
    currentHash: size_t

PlayAnimation @not_a_component @json_with_keys:
  name: std::string
  loop: [bool, true]
  influence: [float, 1.0f]
  timer: float
  timeMultiplier: [float, 1.0f]

Rigged:
  playingAnimations: std::list<PlayAnimation>
  _cpp_only:
    bonePoseTransform: std::unordered_map<SharedBone, mat4>
